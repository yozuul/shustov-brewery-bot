import { Scene, SceneEnter, Hears, On,Ctx, Start, Sender, SceneLeave } from 'nestjs-telegraf'

import { USERS_BUTTON, USERS_SCENE } from '@app/common/constants'
import { BotService } from '../bot.service'
import { SbisService } from 'src/sbis/sbis.service'
import { OrderService, UserService } from '@app/database'

import { NavigationKeyboard, CartKeyboard } from '@bot/keyboards'
import { dateFormatter, trashCleaner } from '@app/common/utils'
import { SessionContext } from '@app/common/interfaces'

@Scene(USERS_SCENE.CART)
export class UsersCartScene {
   constructor(
      private readonly botService: BotService,
      private readonly navigationKeyboard: NavigationKeyboard,
      private readonly cartKeyboard: CartKeyboard,
      private readonly sbisService: SbisService,
      private readonly usersRepo: UserService,
      private readonly orderRepo: OrderService,
   ) {}

   @SceneEnter()
   async onSceneEnter(@Ctx() ctx: SessionContext, @Sender('id') senderId: number ) {
      console.log('Enter Scene ::', USERS_SCENE.CART)
      let navButton = null
      const isAuthUser = await this.usersRepo.findById(senderId)
      if(isAuthUser) {
         navButton = this.navigationKeyboard.backButton()
      } else {
         navButton = this.navigationKeyboard.backAuthButton()
      }
      const menuTitle = await ctx.reply(
         '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑,\n–∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å:',
         navButton
      )
      await this.cartKeyboard.pushCartMenu(ctx)
      ctx.session.trash.push(menuTitle.message_id)
   }

   @Start()
   async onStart(ctx: SessionContext) {
      await ctx.scene.enter(USERS_SCENE.STARTED)
   }
   @SceneLeave()
   async onSceneLeave(@Ctx() ctx: SessionContext) {
      await trashCleaner(ctx)
   }
   async setErrorTime(ctx, userId, keyboardId) {
      const currentTime = new Date()
      console.log(ctx.session.cart.time)
      ctx.session.cart.time = new Date(currentTime.setHours(currentTime.getHours() - 8))
      await this.cartKeyboard.updateMenu(userId, keyboardId, ctx)
   }
   @On('callback_query')
   async submitOrdersHandler(@Ctx() ctx: SessionContext, @Sender('id') userId) {
      const query = ctx.callbackQuery
      const queryData = query['data']
      const keyboardId = query.message.message_id
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      // await this.setErrorTime(userId, keyboardId, ctx)
      if(queryData === 'place_order') {
         const allert = {
            subscribe: '', bonus: ''
         }
         const message = {
            subscribe: '', bonus: ''
         }
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
         const isSubscribed = await this.botService.checkUsersSubscribe(userId)
         if(!isSubscribed) {
            allert.subscribe += '–î–ª—è –æ–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã'
            message.subscribe += '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É\n'
            message.subscribe += '@shustov_brewery_chanel'
         }
         // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–Ω –±—É–¥–µ—Ç –≤ –±–∞–∑–µ
         const isUserExist = await this.usersRepo.isUserAuth(userId)
         if(!isUserExist) {
            if(allert.subscribe) {
               allert.bonus += `\n–¢–∞–∫–∂–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã`
            }
            if(!allert.subscribe) {
               allert.bonus += `–î–ª—è –æ–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã`
            }
            message.bonus += '\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìû –≤–Ω–∏–∑—É —á–∞—Ç–∞.\n'
            message.bonus += '–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –±–æ–Ω—É—Å–Ω–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–¥–∞–≤—Ü—É –Ω–∞ —Ç–æ—á–∫—É –ø—Ä–æ–¥–∞–∂.'
         }
         const errorAllertText = allert.subscribe + allert.bonus
         // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ–¥–Ω–∞ –∏–∑ –æ—à–∏–±–æ–∫, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
         if(errorAllertText) {
            await ctx.answerCbQuery(errorAllertText, {
               show_alert: true
            })
            await ctx.reply(message.subscribe + message.bonus)
         }
         // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –µ—â—ë —Ä–∞–∑ –≤ –°–ë–ò–°
         if(!errorAllertText) {
            const checkSbisUser = await this.sbisService.findUser(isUserExist.phone)
            if(!checkSbisUser) {
               if(isUserExist.role !== 'admin') {
                  await this.usersRepo.deleteUser(isUserExist.phone)
               }
               await ctx.reply(
                  `–ù–æ–º–µ—Ä ${isUserExist.phone} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–¥–∞–≤—Ü—É.`,
                  this.navigationKeyboard.backAuthButton()
               )
            }
            if(checkSbisUser) {
               const isTimeIncorect = this.cartKeyboard.checkMenuLifeTime(ctx)
               if(isTimeIncorect) {
                  ctx.session.cart.day = 'day_tomorrow'
                  await ctx.reply('–ó–∞–∫–∞–∑ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                  await this.cartKeyboard.updateMenu(userId, keyboardId, ctx)
                  return
               }
               if(!isTimeIncorect) {
                  const order = await this.orderRepo.addOrder(isUserExist.id, ctx.session.cart)
                  if(!order) {
                     await ctx.reply('–ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞ –æ—à–∏–±–∫–∞.')
                     await ctx.scene.enter(USERS_SCENE.STARTED)
                  }
                  const cartDate = new Date(ctx.session.cart.time)
                  if(ctx.session.cart.day === 'day_tomorrow') {
                     cartDate.setDate(cartDate.getDate() + 1)
                  }
                  const date = dateFormatter(new Date(cartDate))
                  let submitMsg = ''
                  submitMsg += `<b>–ó–∞–∫–∞–∑ # ${order} –ø—Ä–∏–Ω—è—Ç</b> üç∫\n`
                  submitMsg += date
                  submitMsg += `\n–ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n---\n`
                  submitMsg += ctx.session.cart.orderText
                  submitMsg += `\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.`
                  await ctx.reply(submitMsg, {
                     parse_mode: 'HTML'
                  })
                  await ctx.scene.enter(USERS_SCENE.STARTED)
               }
            }
         }
      }
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º
      const [time, operator] = queryData.split('_')
      let isUpdate = { h: null, m: null, d: null }
      if(time === 'h') {
         isUpdate.h = await this.cartKeyboard.updateTime('hours', operator, ctx)
      }
      if(time === 'm') {
         isUpdate.m = await this.cartKeyboard.updateTime('minutes', operator, ctx)
      }
      const [isDay, when] = queryData.split('_')
      if(isDay === 'day') {
         isUpdate.d = await this.cartKeyboard.updateDay(when, ctx)
      }
      if(isUpdate.h || isUpdate.m || isUpdate.d) {
         await this.cartKeyboard.updateMenu(query.from.id, keyboardId, ctx)
      }
      // –ö–Ω–æ–ø–∫–∞ –í–†–ï–ú–Ø (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
      if(queryData === 'time') {
         ctx.answerCbQuery(this.cartKeyboard.cbAnswer.stopTapAround);
      }

      try {
         // ctx.answerCbQuery()
      } catch (error) {
         return
      }
   }
   @On('contact')
   async handlerContacts(@Ctx() ctx: SessionContext) {
      const message = ctx.update['message']
      const userPhone = parseInt(message?.contact?.phone_number)
      try {
         await ctx.deleteMessage()
      } catch (error) {
         console.log(error)
      }
      if(!userPhone) {
         ctx.reply('–ù–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω')
         return false
      }
      let userPhoneStr =  userPhone.toString()
      if(userPhoneStr.startsWith('7')) {
         userPhoneStr = '8' + userPhoneStr.slice(1)
      }
      const sbisUser = await this.sbisService.findUser(userPhoneStr)
      if(!sbisUser) {
         ctx.reply(`‚ùå –ù–æ–º–µ—Ä ${userPhoneStr} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–¥–∞–≤—Ü—É`)
         return false
      }
      const arr = sbisUser
      const userName = sbisUser[6] && arr[7] ? `${arr[6]} ${arr[7]}` : arr[6]
      const bonusBalanse = await this.sbisService.getBonuses(arr[0])
      let reply = ''
      reply += `${userName}, –º—ã —Ä–∞–¥—ã —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!\n`
      if(bonusBalanse) {
         console.log(parseInt(bonusBalanse))
         reply += `–ë–∞–ª–∞–Ω—Å –≤–∞—à–∏—Ö –±–æ–Ω—É—Å–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${parseInt(bonusBalanse)}\n`
      }
      const isSubscribed = await this.botService.checkUsersSubscribe(message.from.id)
      if(!isSubscribed) {
         reply += '–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n'
         reply += '@shustov_brewery_chanel\n'
         reply += '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –µ—â—ë —Ä–∞–∑'
      }
      if(isSubscribed) {
         reply += '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –µ—â—ë —Ä–∞–∑'
      }
      await ctx.reply(reply, this.navigationKeyboard.backButton())
      await this.usersRepo.addUser({
         role: 'user',
         name: userName,
         tgId: message.from.id,
         phone: userPhoneStr,
         bonus: parseInt(bonusBalanse)
      })
   }

   @Hears(USERS_BUTTON.BACK.TEXT)
   async leaveSceneHandler(@Ctx() ctx: SessionContext) {
      await ctx.scene.enter(USERS_SCENE.ORDERS)
   }
}