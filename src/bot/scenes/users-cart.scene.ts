import { Scene, SceneEnter, Hears, On, Message, Ctx, Start, Sender } from 'nestjs-telegraf';
import { Telegraf, Markup } from 'telegraf';
import { UpdateType as TelegrafUpdateType } from 'telegraf/typings/telegram-types';

import { SessionContext } from '@app/common/interfaces';
import { USERS_BUTTON, USERS_SCENE } from '@app/common/constants';
import { SceneContext } from '@app/common/interfaces';
import {UpdateType} from '@app/common/update-type.decorator';
import {NavigationKeyboard} from '../keyboards/navigation';

@Scene(USERS_SCENE.CART)
export class UsersCartScene {
   constructor(
      private readonly navigationKeyboard: NavigationKeyboard
      // private readonly bot: Telegraf<SessionContext>,
      // private areaService: AreasService,
      // private fileService: FilesService
   ) {}
   @Start()
   async onStart(ctx: SceneContext) {
      ctx.scene.enter(USERS_SCENE.STARTED)
   }
   @Hears(USERS_BUTTON.BACK.TEXT)
   leaveSceneHandler(@Ctx() ctx: SceneContext) {
      ctx.scene.enter(USERS_SCENE.ORDERS)
   }
   @On('callback_query')
   async submitOrdersHandler(@Ctx() ctx: SceneContext) {
      const query = ctx.update['callback_query']
      console.log(query.data)
      if(query.data === 'place_order') {
         ctx.answerCbQuery('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–û–î–¢–í–ï–†–î–ò–¢–¨ –¢–ï–õ–ï–§–û–ù" [–∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω?]', {
            show_alert: true
         });
      }
   }
   @SceneEnter()
   async onSceneEnter1(@Ctx() ctx: SceneContext, @Sender('id') senderId: number ) {
      const text = '<b>–ß–µ—à—Å–∫–æ–µ –Ω–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ: 3 –ª–∏—Ç—Ä–∞</b>\n–°—É–º–º–∞: 150 —Ä—É–± (75 —Ä—É–±./–ª–∏—Ç—Ä)\n---\n<b>–ù–µ–º–µ—Ü–∫–æ–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ: 2 –ª–∏—Ç—Ä–∞</b>‚Äã\n–°—É–º–º–∞: 160 —Ä—É–± (80 —Ä—É–±./–ª–∏—Ç—Ä)\n---\n<b>–¢–µ–º–Ω–æ–µ: 4 –ª–∏—Ç—Ä–∞</b>‚Äã\n–°—É–º–º–∞: 440 —Ä—É–± (110 —Ä—É–±./–ª–∏—Ç—Ä)\n---\n<b>üí≥ –°–£–ú–ú–ê –ö –û–ü–õ–ê–¢–ï: 750 —Ä—É–±.</b>'
      await ctx.reply('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å, –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ç–∞—Ä—É‚Äã:', this.navigationKeyboard.backAuthButton())
      await ctx.reply(text, {
            parse_mode: 'HTML',
            reply_markup: {
               inline_keyboard: [
                  [
                     {
                        text: '‚úÖ –¢–∞—Ä–∞ 1.5 –ª–∏—Ç—Ä–∞', callback_data: `channel_1`
                     },
                     {
                        text: '–¢–∞—Ä–∞ 1 –ª–∏—Ç—Ä', callback_data: `channel_1`
                     },
                  ],
                  [
                     {
                        text: 'üïó', callback_data: `channel_1`
                     }
                  ],
                  [
                     {
                        text: '-', callback_data: `channel_1`
                     },
                     {
                        text: '+', callback_data: `channel_1`
                     },
                     {
                        text: ' 18:20 ', callback_data: `channel_1`
                     },
                     {
                        text: '+', callback_data: `channel_1`
                     },
                     {
                        text: '-', callback_data: `channel_1`
                     },
                  ],
                  [
                     {
                        text: '‚úÖ –°–µ–≥–æ–¥–Ω—è', callback_data: `channel_1`
                     },
                     {
                        text: '–ó–∞–≤—Ç—Ä–∞', callback_data: `channel_1`
                     },
                     {
                        text: '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', callback_data: `channel_1`
                     }
                  ],
                  [
                     {
                        text: '–û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó', callback_data: `place_order`,
                     }
                  ],
               ]
            }
         }
      )

      await ctx.reply('–í–∞—Ä–∏–∞–Ω—Ç 2. –° –±–æ–ª—å—à–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏.\n–í –æ–¥–Ω—É –ª–∏–Ω–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–Ω–∏ –Ω–µ —É–º–µ—â–∞—é—Ç—Å—è')
      await ctx.reply(text, {
            parse_mode: 'HTML',
            reply_markup: {
               inline_keyboard: [
                  [
                     {
                        text: '‚úÖ –¢–∞—Ä–∞ 1.5 –ª–∏—Ç—Ä–∞', callback_data: `channel_1`
                     },
                     {
                        text: '–¢–∞—Ä–∞ 1 –ª–∏—Ç—Ä', callback_data: `channel_1`
                     },
                  ],
                  [
                     {
                        text: '-', callback_data: `channel_1`
                     },
                     {
                        text: '+', callback_data: `channel_1`
                     },
                     {
                        text: '–í–†–ï–ú–Ø', callback_data: `channel_1`
                     },
                     {
                        text: '+', callback_data: `channel_1`
                     },
                     {
                        text: '-', callback_data: `channel_1`
                     },
                  ],
                  [
                     {
                        text: '1Ô∏è‚É£8Ô∏è‚É£:2Ô∏è‚É£0Ô∏è‚É£', callback_data: `channel_1`
                     }
                  ],
                  [
                     {
                        text: '‚úÖ –°–µ–≥–æ–¥–Ω—è', callback_data: `channel_1`
                     },
                     {
                        text: '–ó–∞–≤—Ç—Ä–∞', callback_data: `channel_1`
                     },
                     {
                        text: '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', callback_data: `channel_1`
                     }
                  ],
                  [
                     {
                        text: '–û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó', callback_data: `place_order`,
                     }
                  ],
               ]
            }
         }
      )
      // await ctx.reply('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', {
      //    reply_markup: {
      //       keyboard: [[
      //          { text: '–í—Ö–æ–¥',
      //             request_contact: true },
      //          { text: '–û—Ç–º–µ–Ω–∞' }
      //       ]], one_time_keyboard: true, force_reply: true }
      //    })
      // const time = await ctx.reply('–í—Ä–µ–º—è', {
      //    reply_markup: {
      //       inline_keyboard: [
      //          [
      //             {
      //                text: '–ö–û –í–†–ï–ú–ï–ù–ò', callback_data: `channel_1`
      //             }
      //          ],
      //          [
      //             {
      //                text: '-', callback_data: `channel_1`
      //             },
      //             {
      //                text: '+', callback_data: `channel_1`
      //             },
      //             {
      //                text: '18:20', callback_data: `channel_1`
      //             },
      //             {
      //                text: '+', callback_data: `channel_1`
      //             },
      //             {
      //                text: '-', callback_data: `channel_1`
      //             },
      //          ],
      //          [
      //             {
      //                text: '–ü–û–î–¢–í–ï–†–î–ò–¢–¨ –ó–ê–ö–ê–ó', callback_data: `channel_1`
      //             }
      //          ],
      //       ]
      //    }
      // })
   }
   @On('message')
   async onSceneEnter(@Sender('id') senderId: number, ctx: SceneContext ) {
   }
}