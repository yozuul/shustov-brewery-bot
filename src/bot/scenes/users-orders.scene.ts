import { Scene, SceneEnter, Hears, On, Ctx, Start, Sender, SceneLeave } from 'nestjs-telegraf';

import { USERS_BUTTON, USERS_SCENE } from '@app/common/constants'
import { SessionContext } from '@app/common/interfaces'
import { CartKeyboard, NavigationKeyboard, OrdersKeyboard } from '@bot/keyboards'
import { menuCleaner, trashCleaner } from '@app/common/utils'

@Scene(USERS_SCENE.ORDERS)
export class UsersOrdersScene {
   private isUdate = false
   private menu = null
   constructor(
      private readonly navigationKeyboard: NavigationKeyboard,
      private cartKeyboard: CartKeyboard,
      private readonly ordersKeyboard: OrdersKeyboard
   ) {}

   async checkTime(ctx) {
      const serverTime = new Date();
      const currentTimePlus = new Date(serverTime.getTime() + 20 * 60000)
      if(currentTimePlus > this.cartKeyboard.openingHours.to) {
         await ctx.answerCbQuery('–î–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', {
            show_alert: true
         })
      }
   }
   @On('callback_query')
   async submitOrdersHandler(@Ctx() ctx: SessionContext, @Sender('id') id: number) {
      const query = ctx.callbackQuery
      const queryData = query['data']
      const keyboardId = query.message.message_id
      const userCart = ctx.session.cart
      // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"
      if(queryData === 'submit_order') {
         let isOrder = false
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–ª
         if(userCart.products.length > 0) {
            for (let cartProduct of userCart.products) {
               if(cartProduct.col > 0) isOrder = true
            }
         }
         if(!isOrder) {
            await ctx.answerCbQuery('–í—ã –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏')
            return
         }
         await this.checkTime(ctx)
         // –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
         await menuCleaner(ctx, query.message.message_id)
         await ctx.scene.enter(USERS_SCENE.CART)
         await ctx.answerCbQuery()
         return
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ +-
      const [prefix, producId] = queryData.split('__')
      if(prefix === 'minus' || prefix === 'plus') {
         const checkProduct = userCart.products.find((cartdProduct) => cartdProduct?.id === producId)
         if(!checkProduct) {
            ctx.session.cart.products.push({
               id: producId, col: 0
            })
         }
         for (let cartProduct of userCart.products) {
            if(cartProduct.id === producId) {
               if(cartProduct.col > 0 && prefix === 'minus') {
                  cartProduct.col -= .5
                  this.isUdate = true
               }
               if(prefix === 'plus') {
                  this.isUdate = true
                  cartProduct.col += .5
               }
            }
         }
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ —Ç–∞—Ä—ã
      if(queryData.includes('container')) {
         if(queryData !== ctx.session.cart.container_id) {
            ctx.session.cart.container_id = queryData
            this.isUdate = true
         }
      }
      if(this.isUdate) {
         try {
            await this.ordersKeyboard.updateMenu(query.from.id, keyboardId, ctx)
         } catch (error) {
            console.log(error)
         }
      }
      await ctx.answerCbQuery()
   }

   @SceneEnter()
   async onSceneEnter(@Ctx() ctx: SessionContext, @Sender('id') senderId: number) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      const menuTitle = await ctx.reply('üç∫',
         this.navigationKeyboard.backSubmitButton()
      )
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –ø–∏–≤–∞
      const ordersMenu = await this.ordersKeyboard.pushOrdersMenu(ctx)
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º—É—Å–æ—Ä–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
      ctx.session.trash.push(menuTitle.message_id, ordersMenu.message_id)
   }
   @SceneLeave()
   async onSceneLeave(@Ctx() ctx: SessionContext) {
      await trashCleaner(ctx) // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
   }
   @Hears(USERS_BUTTON.BACK.TEXT)
   async leaveSceneHandler(@Ctx() ctx: SessionContext) {
      await ctx.scene.enter(USERS_SCENE.STARTED)
   }
   @Start()
   async onStart(ctx: SessionContext) {
      await ctx.scene.enter(USERS_SCENE.STARTED)
   }
   @On('message')
   async msgHandler(ctx: SessionContext) {
      console.log(this.menu)
   }
}