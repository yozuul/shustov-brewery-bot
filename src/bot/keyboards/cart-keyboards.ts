import { Injectable } from '@nestjs/common'
import { ProductService } from '@app/database'

@Injectable()
export class CartKeyboard {
   private isUdate = false
   constructor(
      private productsRepo: ProductService
   ) {}
   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π
   async pushCartMenu(ctx) {
      ctx.session.cart.orderText = await this.totalOrderTextCalc(ctx)
      this.setDefaultTime(ctx)

      const submitMenu = await ctx.reply(
         ctx.session.cart.orderText, {
         parse_mode: 'HTML',
         reply_markup: {
            inline_keyboard: this.buttonsData(ctx)
         }
      })
      ctx.session.trash.push(submitMenu.message_id)
   }
   // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
   async updateMenu(userId, keyboardId, ctx) {
      try {
         await ctx.telegram.editMessageReplyMarkup(
            userId, keyboardId, null, {
               inline_keyboard: this.buttonsData(ctx)
            }
         )
      } catch (error) {
         console.log(error)
         console.log('–ú–µ–Ω—é –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
      }
   }
   // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
   get openingHours() {
      return {
         from: this.formatterHoursMinutes(12, 0),
         to: this.formatterHoursMinutes(23, 0),
      }
   }
   // –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –í–†–ï–ú–ï–ù–ò
   // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
   async checkTimeCorrect(updatedTime, ctx) {
      const updateDate = new Date(updatedTime)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
      const openTo = this.openingHours.to
      const openToMinus = new Date(openTo.setMinutes(openTo.getMinutes() - 10))
      if(updateDate > openToMinus) {
         await ctx.answerCbQuery('–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–æ 23:00')
         return false
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
      const openFrom = this.openingHours.from
      const openFromMinus = new Date(openFrom.setMinutes(openFrom.getMinutes() + 10))
      if(updateDate < openFromMinus) {
         await ctx.answerCbQuery('–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º c 12:00')
         return false
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ + 10 –º–∏–Ω
      if(ctx.session.cart.day !== 'day_tomorrow') { // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
         const currentTimePlus = new Date()
         currentTimePlus.setMinutes(currentTimePlus.getMinutes() + 10)
         if(updateDate < currentTimePlus) {
            await ctx.answerCbQuery('–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ')
            return false
         }
      }
      return true
   }
   // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏, —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Ä–µ–º—è –≤ –º–µ–Ω—é –∞–∫—Ç—É–∞–ª—å–Ω–æ
   checkMenuLifeTime(ctx): boolean {
      this.isUdate = false
      const currentTime = new Date()
      if(ctx.session.cart.day !== 'day_tomorrow') {
         const currentTimePlus = new Date(currentTime.setMinutes(currentTime.getMinutes() + 20))
         if(currentTimePlus > new Date(ctx.session.cart.time)) {
            ctx.session.cart.time = currentTimePlus
         }
      }
      const updatedCartTime = new Date(ctx.session.cart.time)
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—É—á–∏–ª–æ—Å—å –±–æ–ª—å—à–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è
      if(updatedCartTime > this.openingHours.to) {
         console.log('updatedCartTime > this.openingHours.to')
         // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
         ctx.session.cart.time = this.openingHours.from
         ctx.session.cart.day = 'day_tomorrow'
         this.isUdate = true
         ctx.answerCbQuery('–û–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
      }
      if(updatedCartTime < this.openingHours.from) {
         console.log('uupdatedCartTime < this.openingHours.from')
         // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
         ctx.session.cart.time = this.openingHours.from
         ctx.session.cart.day = 'day_today'
         this.isUdate = true
         ctx.answerCbQuery('–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 12:00')
      }
      return this.isUdate
   }
   // –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–ô [+] / [-]
   // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–µ–Ω—é
   async updateTime(timeUnit, operator, ctx): Promise<boolean> {
      console.log(timeUnit, operator)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—É–º–∞–ª, –º–∞–≥–∞–∑–∏–Ω —É–∂–µ –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è
      await this.checkMenuLifeTime(ctx)
      console.log(this.isUdate)
      if(this.isUdate) return this.isUdate
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ —Ä–∞—Å—á—ë—Ç—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–æ–∫
      const updatedTime = this.changeTime(ctx.session.cart.time, timeUnit, operator)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∏ –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const isUpdate = await this.checkTimeCorrect(updatedTime, ctx)
      if(isUpdate) {
         // –ï—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å–µ—Å—Å–∏–∏, –∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
         ctx.session.cart.time = new Date(updatedTime)
         if(operator === 'plus' && ctx.session.cart.day === 'day_near') {
            ctx.session.cart.day = 'day_today'
         }
         this.isUdate = true
      }
      if(!isUpdate) {
         ctx.answerCbQuery()
      }
      return this.isUdate
   }

   async updateDay(selectedDay, ctx) {
      this.isUdate = false
      const dayId = `day_${selectedDay}`
      if(selectedDay == 'tomorrow') {
         ctx.session.cart.day = dayId
         this.isUdate = true
      }
      if((selectedDay == 'near') || (selectedDay == 'today')) {
         const currentTime = new Date()
         const currentPlus = currentTime.setMinutes(currentTime.getMinutes() + 20)
         const isUpdate = this.checkTimeCorrect(currentPlus, ctx)
         if(isUpdate) {
            ctx.session.cart.time = new Date(currentPlus)
            ctx.session.cart.day = dayId
            this.isUdate = true
         }
      }
      return this.isUdate
   }
   // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
   changeTime(current, timeUnit, operator) {
      current = new Date(current)
      if(timeUnit === 'hours') {
         if(operator === 'plus') {
            return current.setHours(current.getHours() + 1)
         }
         if(operator === 'minus') {
            return current.setHours(current.getHours() - 1)
         }
      }
      if(timeUnit === 'minutes') {
         if(operator === 'plus') {
            return current.setMinutes(current.getMinutes() + 10)
         }
         if(operator === 'minus') {
            return current.setMinutes(current.getMinutes() - 10)
         }
      }
   }
   // –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ö–ù–û–ü–û–ö –ú–ï–ù–Æ
   // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –≤ –º–µ–Ω—é
   getFormatedTime(ctx) {
      const cartTime = new Date(ctx.session.cart.time)
      return {
         hours: cartTime.getHours().toString().padStart(2, '0'),
         minutes: cartTime.getMinutes().toString().padStart(2, '0')
      }
   }
   // –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å
   dayViewButton(ctx) {
      const { day } = ctx.session.cart
      const btnData = []
      const variants = [
         { name: '–ë–ª–∏–∂–∞–π—à–µ–µ', id: `day_near` },
         { name: '–ü–æ–∑–∂–µ', id: `day_today` },
         { name: '–ó–∞–≤—Ç—Ä–∞', id: `day_tomorrow` }
      ]
      for (let toDay of variants) {
         btnData.push({
            text: day === toDay.id ? `üü¢ ${toDay.name}` : `üîò ${toDay.name}`,
            callback_data: toDay.id
         })
      }
      return btnData
   }
   // –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è
   timeViewButton(ctx) {
      const { hours, minutes } = this.getFormatedTime(ctx)
      const { hourEmoji, minuteEmoji } = this.emojiDigit(hours, minutes)
      return [
         {
            text: `${hourEmoji} : ${minuteEmoji}`, callback_data: `time`
         }
      ]
   }
   // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å–∞–º–∏
   buttonsData(ctx) {
      return [
         [
            {
               text: '-', callback_data: `h_minus`
            },
            {
               text: '+', callback_data: `h_plus`
            },
            {
               text: '–í–†–ï–ú–Ø', callback_data: `time`
            },
            {
               text: '-', callback_data: `m_minus`
            },
            {
               text: '+', callback_data: `m_plus`
            },
         ],
         this. timeViewButton(ctx),
         this.dayViewButton(ctx),
         [
            {
               text: '–ó–ê–ö–ê–ó –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ üëç', callback_data: `place_order`,
            }
         ],
      ]
   }
   // –û–ë–©–ï–ï
   // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ—Å—Å–∏—é
   async setDefaultTime(ctx) {
      const serverTime = new Date();
      const currentTimePlus = new Date(serverTime.getTime() + 20 * 60000)
      if(currentTimePlus > this.openingHours.to) {
         ctx.session.cart.time = this.openingHours.from
         ctx.session.cart.day = 'day_tomorrow'
         return
      }
      if(currentTimePlus < this.openingHours.from) {
         ctx.session.cart.time = new Date(this.openingHours.from.getTime() + 20 * 60000)
         ctx.session.cart.day = 'day_today'
         return
      }
      ctx.session.cart.time = currentTimePlus
      ctx.session.cart.day = 'day_near'
   }
   // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
   formatterHoursMinutes(h, m) {
      const currentTime = new Date()
      currentTime.setHours(h)
      currentTime.setMinutes(m)
      return currentTime
   }
   // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞
   async totalOrderTextCalc(ctx) {
      const containerPrice = {
         container_1: 15, container_2: 3000
      }
      const containerId = ctx.session.cart.container_id
      let orderText = ''
      const { db_products, added_products } = ctx.session.cart
      for (let addedProduct of added_products) {
         const callbackName = addedProduct.callback_data
         const { price, name } = db_products.find((product) => {
            return product.callback_data == callbackName
         })
         let sumPerProduct = 0
         let totalLittre = 0
         let containerSumm = ''
         if(containerId === 'container_1') {
            totalLittre = addedProduct.col * 1.5
            sumPerProduct = price * totalLittre
            containerSumm = (addedProduct.col * containerPrice.container_1) + '—Ä—É–±./—Ç–∞—Ä–∞'
         }
         if(containerId === 'container_2') {
            totalLittre = addedProduct.col * 25
            sumPerProduct = price * totalLittre
            containerSumm += (addedProduct.col * 100) + ' —Ä—É–±./–∞—Ä–µ–Ω–¥–∞ –≤ —Å—É—Ç–∫–∏ + '
            containerSumm += '–∑–∞–ª–æ–≥ ' + (addedProduct.col * containerPrice.container_2)
            containerSumm += ' —Ä—É–±. –∑–∞ —Ç–∞—Ä—É'
         }
         orderText += `<b>${name}: ${totalLittre} –ª.</b>\n`
         orderText += `–°—É–º–º–∞: ${sumPerProduct} —Ä—É–±. ‚Äî ${price} —Ä—É–±./–ª–∏—Ç—Ä \n+ ${containerSumm}\n`
         orderText += `---\n`
      }
      orderText += `üí≥ –ö –û–ü–õ–ê–¢–ï: ${ctx.session.cart.summ} —Ä—É–±.`
      return orderText
   }

   get cbAnswer() {
      const onlyAuthUsers = '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–û–î–¢–í–ï–†–î–ò–¢–¨ –¢–ï–õ–ï–§–û–ù"'
      const stopTapAround = '–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ [+] [-]'
      return { onlyAuthUsers, stopTapAround }
   }

   emojiDigit(hours, minutes) {
      const emoji = {
         '0': '0Ô∏è‚É£', '1': '1Ô∏è‚É£', '2': '2Ô∏è‚É£', '3': '3Ô∏è‚É£', '4': '4Ô∏è‚É£', '5': '5Ô∏è‚É£', '6': '6Ô∏è‚É£', '7': '7Ô∏è‚É£', '8': '8Ô∏è‚É£', '9': '9Ô∏è‚É£'
      }
      const h = hours.split('').map((dig) => emoji[dig])
      const m = minutes.split('').map((dig) => emoji[dig])
      return {
         hourEmoji: h.join(''), minuteEmoji: m.join('')
      }
   }
}