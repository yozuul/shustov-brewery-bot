import { Markup } from 'telegraf'
import { Injectable } from '@nestjs/common';

import { USERS_BUTTON } from '@app/common/constants';
import { ProductsService } from '@app/database';

@Injectable()
export class CartKeyboard {
   constructor(
      private productsRepo: ProductsService
   ) {}
   async pushCartMenu(ctx) {
      const totalOrderText = await this.totalOrderText(ctx)
      this.setDefaultTime(ctx)
      const submitMenu = await ctx.reply(totalOrderText, {
         parse_mode: 'HTML',
         reply_markup: this.buttonsData(ctx)
      })
      ctx.session.trash.push(submitMenu.message_id)
   }

   async updateMenu(ctx) {
      console.log(ctx)
   }

   // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏, —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–µ–Ω—é —É–∂–µ –Ω–µ –≤–∏—Å–∏—Ç –±–æ–ª–µ–µ 20 –º–∏–Ω—É—Ç
   async checkMenuLifeTime(ctx) {
      let { h, m } = ctx.session.cart.time
      const cartTimeFormat = this.dateFormatter(h, m)
      const currentTime = new Date()
      // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é, –º—ã –¥–æ–±–∞–≤–ª—è–ª–∏ + 20 –º–∏–Ω—É—Ç. –°–≤–µ—Ä—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
      if(currentTime > cartTimeFormat) {
         // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –±–æ–ª—å—à–µ, –∑–Ω–∞—á–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–æ—Ä–∑–∏–Ω—ã
         this.setDefaultTime(ctx)
         // await ctx.answerCbQuery('–í—Ä–µ–º—è –∫–æ—Ä–∑–∏–Ω—ã –±—ã–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ')
         return currentTime
      }
      return cartTimeFormat
   }

   dateFormatter(h, m) {
      const currentTime = new Date()
      currentTime.setHours(h)
      currentTime.setMinutes(m)
      return currentTime
   }

   async updateTime(timeUnit, operation, ctx) {
      console.log('TimeUnit ::', timeUnit)
      console.log('Operation ::', operation)
      // –ï—Å–ª–∏ –º–µ–Ω—é –≤–∏—Å–∏—Ç –º–µ–Ω–µ–µ 20 –º–∏–Ω—É—Ç, –æ–ø–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–µ–º —Å–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É, –∏–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, –∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º + 20
      const currentCartTime = await this.checkMenuLifeTime(ctx)

      if (timeUnit === 'hours') {
         if(operation === 'plus') {
            const updatedTime = new Date(currentCartTime.setHours(currentCartTime.getHours() + 1))
            ctx.session.cart.time.h = updatedTime.getHours()
            if(!(this.openingHours.to > updatedTime)) {
               ctx.session.cart.time.h = updatedTime.getHours().toString().padStart(2, '0')
            } else {
               await ctx.answerCbQuery('–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–æ 23:00')
               return
            }
         }
//          if (operation === 'plus' && currentHours < openingHours.to.hours) {
//             updatedHours++;
//          }
//          if (operation === 'minus' && currentHours > openingHours.from.hours) {
//             updatedHours--;
//          }
      }
//
//       if (timeUnit === 'minutes') {
//          if (operation === 'plus' && currentMinutes < 50) {
//             updatedMinutes += 10;
//          }
//          if (operation === 'minus' && currentMinutes >= 10) {
//             updatedMinutes -= 10;
//          }
//       }
//       currentHours = updatedHours;
//       currentMinutes = updatedMinutes;
//       console.log('currentHours', currentHours)
//       console.log('currentMinutes', currentMinutes)
//       ctx.session.cart.time.h = currentHours
//       ctx.session.cart.time.m = currentMinutes
   }

   dayViewButton(ctx) {
      const { day } = ctx.session.cart
      const btnData = []
      const variants = [
         { name: '–ë–ª–∏–∂–∞–π—à–µ–µ', id: `day_near` },
         { name: '–ü–æ–∑–∂–µ', id: `day_today` },
         { name: '–ó–∞–≤—Ç—Ä–∞', id: `day_tomorrow` }
      ]
      for (let toDay of variants) {
         btnData.push(
            { text: day === toDay.id ? `üü¢ ${toDay.name}` : `üîò ${toDay.name}`, callback_data: toDay.id }
         )
      }
      return btnData
   }
   timeViewButton(ctx) {
      const { h, m } = ctx.session.cart.time
      return [
         {
            text: `${h} : ${m}`, callback_data: `time`
         }
      ]
   }
   buttonsData(ctx) {
      return {
         inline_keyboard: [
            [
               {
                  text: '-', callback_data: `h_minus`
               },
               {
                  text: '+', callback_data: `h_plus`
               },
               {
                  text: '–í–†–ï–ú–Ø', callback_data: `time`
               },
               {
                  text: '-', callback_data: `m_minus`
               },
               {
                  text: '+', callback_data: `m_plus`
               },
            ],
            this. timeViewButton(ctx),
            this.dayViewButton(ctx),
            [
               {
                  text: '–ó–ê–ö–ê–ó –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ üëç', callback_data: `place_order`,
               }
            ],
         ]
      }
   }

   setDefaultTime(ctx) {
      const serverTime = new Date();
      const saerverTimePlus = new Date(serverTime.getTime() - 200 * 60000)
      const hoursPlus = saerverTimePlus.getHours().toString().padStart(2, '0')
      const minutesPlus = saerverTimePlus.getMinutes().toString().padStart(2, '0')
      ctx.session.cart.time.h = hoursPlus
      ctx.session.cart.time.m = minutesPlus
      return saerverTimePlus
   }

   get openingHours() {
      return {
         from: this.dateFormatter(12, 0),
         to: this.dateFormatter(23, 0),
      }
   }

   async totalOrderText(ctx) {
      let orderText = ''
      let totalSumm = null
      const { products } = ctx.session.cart
      for (let cartProduct of products) {
         const { price, name } = await this.productsRepo.getPrice(cartProduct.id)
         const sumBerProduct = cartProduct.col * price
         totalSumm += sumBerProduct
         orderText += `<b>${name}: ${cartProduct.col} –ª.</b>\n–°—É–º–º–∞: ${sumBerProduct} —Ä—É–±. (${price} —Ä—É–±./–ª–∏—Ç—Ä)\n---\n`
      }
      orderText += `üí≥ –ö –û–ü–õ–ê–¢–ï: ${totalSumm} —Ä—É–±.`
      return orderText
   }

   get cbAnswer() {
      const onlyAuthUsers = '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–û–î–¢–í–ï–†–î–ò–¢–¨ –¢–ï–õ–ï–§–û–ù"'
      const stopTapAround = '–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ [+] [-]'
      return { onlyAuthUsers }
   }
}